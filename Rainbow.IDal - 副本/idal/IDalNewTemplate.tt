<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.xml" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Data" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>

//  导入MultipleOutputHelper.ttinclude文件
<#@include file="$(SolutionDir)\T4\MultipleOutputHelper.ttinclude"#> 

<#        
        string connectionString= Manager.appcon;        
        SqlConnection conn = new SqlConnection(connectionString);
        conn.Open();
    
        string selectQuery ="SET FMTONLY ON; select * from @tableName; SET FMTONLY OFF;";
        SqlCommand command = new SqlCommand(selectQuery,conn);
        SqlDataAdapter ad = new SqlDataAdapter(command);
        System.Data.DataSet ds = new DataSet(); 
  
        var manager = Manager.Create(Host, GenerationEnvironment);  
        System.Data.DataTable schema = conn.GetSchema("Tables");
		string createtime=DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
        foreach(System.Data.DataRow row in schema.Rows)
        {    
            ds.Tables.Clear();
            string tb_name= row["TABLE_NAME"].ToString();        
            command.CommandText = selectQuery.Replace("@tableName",row["TABLE_NAME"].ToString());
            ad.FillSchema(ds, SchemaType.Mapped,tb_name);  
            manager.StartNewFile(tb_name+"Dal.cs");#>
/*******************************************************************************************
 * 此代码由T4模板自动生成
 * 对此文件的更改可能会导致不正确的行为，并且如果
 * 重新生成代码，这些更改将会丢失。
 * 日期:<#=createtime#>
 * 作者:huijun zhu<kngcbzdsn@outlook.com> 
 * 此技术信息为本公司机密信息，未经本公司书面同意禁止向第三方披露．　                   
 * 版权所有：榆钱（北京）科技有限公司　　　　　　          
 * 此模板生成实体层:Rainbow.IDal　　　　　                 
 * *******************************************************************************************/
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using Rainbow.Models;


namespace Rainbow.IDal
{    
    /// <summary>
    /// <#=tb_name#>Dal实现
    /// </summary>
    public partial interface I<#=tb_name#>    
    {    
	    /// <summary>
        /// 更新数据实体到上下文
        /// </summary>
        bool Edit(string id,dynamic o);
        /// <summary>
        /// 根据条件修改
        /// </summary>
        /// <param name="wherelm">条件</param>
        /// <param name="data">数据</param>
        /// <returns></returns>
        bool EditWhere(dynamic wherelm, dynamic data);

        /// <summary>
        /// 添加新数据
        /// </summary>
        /// <param name="entity"></param>
        /// <returns></returns>
        bool Insert(<#=tb_name#> entity);
        /// <summary>
        /// 获得所有数据
        /// </summary>
        /// <returns></returns>
        IEnumerable<<#=tb_name#>> GetAll();
        /// <summary>
        /// 根据主键获得数据
        /// </summary>
        /// <param name="id">主键id</param>
        /// <returns></returns>
        <#=tb_name#> GetById(string id);
        /// <summary>
        /// 删除数据
        /// </summary>
        /// <param name="id">主键</param>
        /// <returns></returns>
        bool Delete(string id);
        /// <summary>
        /// 按照条件删除
        /// </summary>
        /// <param name="wherelm"></param>
        /// <returns></returns>
        bool DeleteWhere(dynamic wherelm);
        /// <summary>
        /// 分页查询
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="criteria"></param>
        /// <param name="param"></param>
        /// <returns></returns>
        PageDataView<<#=tb_name#>> GetPageData(PageCriteria criteria, object param = null);
        ///// <summary>
        ///// 匿名条件查询
        ///// </summary>
        ///// <param name="wherela"></param>
        ///// <returns></returns>
        //IEnumerable<TEntity> GetWhere(dynamic wherela);
        ///// <summary>
        ///// 按照条件获得数量
        ///// </summary>
        ///// <param name="wherela"></param>
        ///// <returns></returns>
        //int GetWhereCount111(string id, dynamic o);
    }
}
    
<#
        manager.EndBlock();    
         }            
        conn.Close();  
       manager.Process(true);  
#>